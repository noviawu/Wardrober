{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { firebaseRealtimeDB, firebaseStorage } from \"../firebase\";\nexport var generateID = {\n  getRandomID: function getRandomID() {\n    var s4 = function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    };\n\n    return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n  }\n};\nexport var uploadImage = {\n  uploadImageAsync: function uploadImageAsync(uri) {\n    var blob, fileRef;\n    return _regeneratorRuntime.async(function uploadImageAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n              var xhr = new XMLHttpRequest();\n\n              xhr.onload = function () {\n                resolve(xhr.response);\n              };\n\n              xhr.onerror = function (e) {\n                console.log(e);\n                reject(new TypeError(\"Network request failed\"));\n              };\n\n              xhr.responseType = \"blob\";\n              xhr.open(\"GET\", uri, true);\n              xhr.send(null);\n            }));\n\n          case 2:\n            blob = _context.sent;\n            fileRef = firebaseStorage.ref().child(new Date().toISOString());\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fileRef.put(blob));\n\n          case 6:\n            blob.close();\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(fileRef.getDownloadURL());\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["/Users/xiaodanwu/Desktop/7th/CS app dev /Wardrober/utils/utils.js"],"names":["firebaseRealtimeDB","firebaseStorage","generateID","getRandomID","s4","Math","floor","random","toString","substring","uploadImage","uploadImageAsync","uri","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","e","console","log","TypeError","responseType","open","send","blob","fileRef","ref","child","Date","toISOString","put","close","getDownloadURL"],"mappings":";AAAA,SAASA,kBAAT,EAA6BC,eAA7B;AAEA,OAAO,IAAMC,UAAU,GAAG;AACxBC,EAAAA,WAAW,EAAE,uBAAM;AACjB,QAAMC,EAAE,GAAG,SAALA,EAAK,GAAM;AACf,aAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EACJC,QADI,CACK,EADL,EAEJC,SAFI,CAEM,CAFN,CAAP;AAGD,KAJD;;AAMA,WACEL,EAAE,KACFA,EAAE,EADF,GAEA,GAFA,GAGAA,EAAE,EAHF,GAIA,GAJA,GAKAA,EAAE,EALF,GAMA,GANA,GAOAA,EAAE,EAPF,GAQA,GARA,GASAA,EAAE,EATF,GAUAA,EAAE,EAVF,GAWAA,EAAE,EAZJ;AAcD;AAtBuB,CAAnB;AAyBP,OAAO,IAAMM,WAAW,GAAG;AACzBC,EAAAA,gBAAgB,EAAE,0BAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClD,kBAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;;AACAD,cAAAA,GAAG,CAACE,MAAJ,GAAa,YAAY;AACvBJ,gBAAAA,OAAO,CAACE,GAAG,CAACG,QAAL,CAAP;AACD,eAFD;;AAGAH,cAAAA,GAAG,CAACI,OAAJ,GAAc,UAAUC,CAAV,EAAa;AACzBC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAN,gBAAAA,MAAM,CAAC,IAAIS,SAAJ,CAAc,wBAAd,CAAD,CAAN;AACD,eAHD;;AAIAR,cAAAA,GAAG,CAACS,YAAJ,GAAmB,MAAnB;AACAT,cAAAA,GAAG,CAACU,IAAJ,CAAS,KAAT,EAAgBd,GAAhB,EAAqB,IAArB;AACAI,cAAAA,GAAG,CAACW,IAAJ,CAAS,IAAT;AACD,aAZkB,CADH;;AAAA;AACVC,YAAAA,IADU;AAeVC,YAAAA,OAfU,GAeA5B,eAAe,CAAC6B,GAAhB,GAAsBC,KAAtB,CAA4B,IAAIC,IAAJ,GAAWC,WAAX,EAA5B,CAfA;AAAA;AAAA,6CAgBVJ,OAAO,CAACK,GAAR,CAAYN,IAAZ,CAhBU;;AAAA;AAmBhBA,YAAAA,IAAI,CAACO,KAAL;AAnBgB;AAAA,6CAqBHN,OAAO,CAACO,cAAR,EArBG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADO,CAApB","sourcesContent":["import { firebaseRealtimeDB, firebaseStorage } from \"../firebase\";\n\nexport const generateID = {\n  getRandomID: () => {\n    const s4 = () => {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    };\n    //return id of format 'aaaaaaaa'-'aaaa'-'aaaa'-'aaaa'-'aaaaaaaaaaaa'\n    return (\n      s4() +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      s4() +\n      s4()\n    );\n  },\n};\n\nexport const uploadImage = {\n  uploadImageAsync: async (uri) => {\n    const blob = await new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.onload = function () {\n        resolve(xhr.response);\n      };\n      xhr.onerror = function (e) {\n        console.log(e);\n        reject(new TypeError(\"Network request failed\"));\n      };\n      xhr.responseType = \"blob\";\n      xhr.open(\"GET\", uri, true);\n      xhr.send(null);\n    });\n\n    const fileRef = firebaseStorage.ref().child(new Date().toISOString());\n    await fileRef.put(blob);\n\n    // We're done with the blob, close and release it\n    blob.close();\n\n    return await fileRef.getDownloadURL();\n  },\n};\n"]},"metadata":{},"sourceType":"module"}